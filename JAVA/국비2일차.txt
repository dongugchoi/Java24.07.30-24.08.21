형변환
데이터입력
연산자


형변환(casting)
- 자료형을 다른 자료형으로 변환하는 것을 의미한다
- 모든 연산은 기본적으로 같은 자료형들끼리만 수행할 수 있다.
- 서로 다른 자료형의 연산을 수행하기 위해서는 같은 자료형으로 변환해야 한다.

자동형변환
		작은 자료형 -> 큰 자료형

강제형변환(Demotion)
		큰 자료형 -> 작은 자료형
		큰 컵의 물을 작은 컵에 옮겨 담는 것과 같다.
		물의 양에 따라서 보존될 수 있지만 넘칠수도 있다.
		큰 자료형에서 작은 자료형으로 옮길 때 데이터의 손실이 발생할 수도 있고 안할 수도 있다.
		데이터의 손실이 일어난다면 정확한 연산을 수행할 수 없기 때문에
		예상하지 못한 결과를 얻을 수 있으므로 강제 형변환은 항상 주의가 필요하다.
								

데이터의 입력
- 키보드를 통해 다양한 데이터를 자유롭게 입력하는 방법
- 키보드를 통해 입력하는 데이터를 문자열로 얻기 위해서는
'java.util'패키지에 있는 Scanner 클래스를 이용해야 한다.

다른 패키지에 있는 클래스를 사용하려고 할때 import라는 작업을 해야한다.
import 해당 클래스의 경로
import java.util.Scanner;

Scanner클래스의 객체를 생성
Scanner 객체명 = new Scanner(System.in);

int 변수 = 객체명.netxInt(); //정수를 키보드를 통해 입력받는다.

nextByte() 입력받은 값을 byte형으로 변환
nextShort() 입력받은 값을 short형으로 변환
nextInt() 입력받은 값을 int형으로 변환
nextLong() 입력받은 값을 long형으로 변환
nextFloat() 입력받은 값을 float형으로 변환
nextDouble() 입력받은 값을 double형으로 변환
nextLine() 입력받은 라인 전체를 문자열 타입으로 반환 엔터쓰면끝남
next() 입력받은 값을 문자열타입으로 반환, 띄어쓰기 쓰면 끝남


연산자(Operator)
- 연산이란 데이터를 처리하고 결과를 산출하는 작업을 말한다.
- 연산이란 항(피연산자)과 연산자로 이루어진다.
- 항은 연산에 사용되는 값을 의미하며, 연산자는 기호를 의미한다.
- 항과 연산자를 이용해 연산 과정을 나열한 것을 연산식(expression) 이라고 한다.

기본 연산자의 종류
- 자바는 사칙연산을 비롯해 다양한 연산자를 제공하고 있다.
- 피연산자의 개수에 따라 단항, 이항, 삼항 연산자로 분류할 수 있다.
- 사용 목적에 따라 산술, 증감, 대입, 논리, 비트, 등으로 분류할 수 있다.


최고 연산자	. , ()
증감 연산자	++, --
산술 연산자	+, -, *, /, % 
 / = 몫을 구함 % = 나머지를 구함
시프트연산자	>>, <<
비교연산자	>, <, >=, <=, ==, !=
논리연산자	&&, ||, !
비트연산자	&,|,~,^
대입연산자	=, +=, -=, *=, /=, %=
삼항연산자	조건식?A:B


제어문
- 일반적으로 프로그램에 포함된 실행문은 순차적으로 실행이 된다.
- 하지만 순차적으로만 실행한다면 프로그램이 매우 길어지거나 표현하기 어려운 상황이 발생할 수 있다.
- 또한 선택의 념을 구현하기 힘들다.

조건문
-조건식에 따라서 프로그램의 흐름을 제어할 수 있는 문법
-삼항연산자에서 미리 봤듯이, 조건식의 true또는 false라는 결과에 따라서 어떤 구문을 실행할지 결정한다.

조건문의 종류
-조건문에는 크게 if와 switch가 있다.
-고려해야하는 조건이 적으면 if, 많으면 switch를 사용하는것이 효율적이다.
-하지만 특정 개수에 따라 반드시 고정적으로 골라서 써야하는것은 아니다.


단순 if문

-조건문 중에서도 가장 기본이 되는 명령문이다.

조건식에는 논리형으로 결과를 확인할 수 있는 모든 식을 넣을 수 있다.
if(조건식){
    조건식이 참일 때 실행할 문장
}

만약 실행해야 하는 명령이 하나라면 중괄호를 생략할 수 있다.

if(조건식) 조건식이 참일 때 실행할 문장;

자바에서 간결하고 좋은 코드를 만드는 중괄호와 들여쓰기
- 중괄호 블록은 여러개의 명령을 하나로 묶기위해 작성한다.
- 수행문이 하나일 경우 생략할 수 있지만 중괄호르 사용하면 가독성이 좋을 뿐 아니라 
- 코드의 해석이 용이하고 버그를 찾아 수정하는데 도움이 되므로 중괄호를 사용하는 습관을 길러두는 것이 좋다.

if-else문
-if문을 사용하면 조건이 참(true)일때만 흐름을 제어할 수 있다.
-조건이 거짓일 때도 흐름을 제어하고 싶다면 if-else문을 사용한다.

if(조건식){
    조건식이 참일 때 실행할 문장
}else{ -> else에는 조건이 붙지 않는다.
    조건식이 거짓일 때 실행할 문장
}


반복문
