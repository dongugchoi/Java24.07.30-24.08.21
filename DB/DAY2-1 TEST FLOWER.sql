CREATE TABLE FLOWER(
	F_NAME VARCHAR2(200) PRIMARY KEY,
	F_COLOR VARCHAR2(100),
	F_PRICE NUMBER
);


DROP TABLE FLOWER;

CREATE TABLE POT(
	P_NUM NUMBER PRIMARY KEY,
	P_COLOR VARCHAR2(100),
	P_SHAPE VARCHAR2(200),
	F_NAME VARCHAR2(200),
	CONSTRAINTS F_NAMEFK FOREIGN KEY(F_NAME) REFERENCES FLOWER(F_NAME)
);

DROP TABLE POT;

CREATE TABLE ARTIST(
	A_NAME VARCHAR2(200) PRIMARY KEY, --아티스트이름
	A_NATIONALITY VARCHAR2(200), --국적
	A_DEBUT DATE --데뷔년도
);

DROP TABLE ARTIST;
근무기록

CREATE TABLE CD(직책
	CD_TITLE VARCHAR2(200) PRIMARY KEY, -- 타이틀 
	CD_PRICE NUMBER, -- 가격
	CD_GENRE VARCHAR2(200), -- 장르
	CD_TRACKLIST VARCHAR2(300), -- 트랙 리스트
	A_NAME VARCHAR2(200), 
	CONSTRAINTS ARTNAME FOREIGN KEY(A_NAME) REFERENCES ARTIST(A_NAME)
);

DROP TABLE CD;

CREATE TABLE TRACK(
	T_TITLE VARCHAR2(200) PRIMARY KEY, --트랙 타이틀
	CD_TITLE VARCHAR2(200), --타이틀
	CONSTRAINTS CTITLE FOREIGN KEY(CD_TITLE) REFERENCES CD(CD_TITLE),
	TR_RT NUMBER --런닝타임
);

DROP TABLE TRACK;
/* --------------------------------------------------------------------------- */



CREATE TABLE DEPARTMENT( --부서
	D_NUM NUMBER PRIMARY KEY, --부서번호
	D_NAME VARCHAR2(100) --부서이름
);

DROP TABLE DEPARTMENT;

CREATE TABLE EMPLOYEESS( -- 직원
	E_NUM NUMBER PRIMARY KEY, --직원번호
	E_NAME VARCHAR2(100),  --직원이름
	E_POSITION VARCHAR2(100), -- 직책
	D_NUM NUMBER,
	CONSTRAINT NUMFK FOREIGN KEY(D_NUM) REFERENCES DEPARTMENT(D_NUM)
);

DROP TABLE EMPLOYEE;

CREATE TABLE DEPENDENTS( --부양가족
	D_NAME VARCHAR2(100) PRIMARY KEY, -- 부양가족이름
	D_AGE NUMBER, -- 부양가족 나이
	E_NUM NUMBER, -- 직원의 번호
	CONSTRAINTS FNFK FOREIGN KEY(E_NUM) REFERENCES EMPLOYEESS(E_NUM)
);

DROP TABLE DEPENDENTS;

CREATE TABLE WORKRECORD(
	W_PERIOD DATE, -- 기간
	E_NUM NUMBER,
	CONSTRAINT FNSFK FOREIGN KEY(E_NUM) REFERENCES EMPLOYEESS(E_NUM)
);

DROP TABLE WORKRECORD;
-------------------------------------------------------------------------------------------

-- 전체ID와 전체NAME 열 조회ㄹ
SELECT EMPLOYEE_ID ,FIRST_NAME FROM EMPLOYEES;
-- 테이블 안에있는 모든 열 조회
SELECT * FROM EMPLOYEES;

-- 컬럼 조회
SELECT * FROM COLS WHERE TABLE_NAME = 'EMPLOYEES'

-- 사원테이블에서 모든 정보를 조회하세요
SELECT * FROM EMPLOYEES;

-- DEPARTMENT(부서) 테이블의 모든 정보를 조회하세요
SELECT * FROM DEPARTMENTS;

-- 사원테이블에서 이름, 직종, 급여 조회
SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES;
-- 컬럼에 실제로 없는 정보도 출력할 수 있다.
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, COMMISSION_PCT, SALARY, SALARY*COMMISSION_PCT 
FROM EMPLOYEES;

--사원테이블에서 급여가 10000이상인 사원들의 정보를 사번, 이름, 급여 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY 
FROM EMPLOYEES WHERE SALARY >= 10000;

-- 사원테이블에서 이름이 MICHAEL인 사원의 사번, 이름을 조회
-- 문자열데이터는 ''에 넣어서 표현한다

SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME 
FROM EMPLOYEES WHERE FIRST_NAME  ='Michael';

-- 사원테이블에서 직종이 it_prog인 사원들의 정보를 사번, 이름, 직종, 급여 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY  
FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' ;

--사원 테이블에서 급여가 10000이상 13000이하인 사원의 정보를 이름, 급여 순으로 조회하세요
SELECT FIRST_NAME ,SALARY 
FROM EMPLOYEES WHERE SALARY >= 10000 AND SALARY <=13000;

--사원 테이블에서 입사일이 05년9월21일 이후에 입사한 사원의 정보를 사번, 이름, 입사일 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE 
FROM EMPLOYEES WHERE HIRE_DATE >='2005-09-21';

-- 사원테이블에서 2006년도에 입사한 사원들의 정보를 사번, 이름, 직종, 입사일 순 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, HIRE_DATE 
FROM EMPLOYEES WHERE HIRE_DATE >='2006-01-01' AND HIRE_DATE <= '2006-12-31';

-- 사원테이블에서 직종이 'SA_MAN' 이거나 'IT_PROG'인 사원들의 모든 정보를 출력하세요

SELECT * 
FROM EMPLOYEES WHERE JOB_ID ='SA_MAN' OR JOB_ID = 'IT_PROG'; 

--사원테이블에서 급여가 2200, 3200, 5000, 6000을 받는 사원들의 정보를
-- 사번, 이름, 직종, 급여 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY 
FROM EMPLOYEES WHERE SALARY = 2200 OR SALARY =3200 OR SALARY = 5000 OR SALARY =6000;

-- BETWEEN
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, HIRE_DATE 
FROM EMPLOYEES WHERE HIRE_DATE BETWEEN '2006-01-01' AND '2006-12-31';

-- IN(값,값,값)
--사원테이블에서 급여가 2200, 3200, 5000, 6000을 받는 사원들의 정보를
-- 사번, 이름, 직종, 급여 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY 
FROM EMPLOYEES WHERE SALARY IN(2200,3200,5000,6000);

-- 직종이 'SA_MAN', 'IT_PROG'가 아닌 모든 사원의 정보를 출력
SELECT * 
FROM EMPLOYEES WHERE JOB_ID NOT IN('SA_MAN','IT_PROG');

-- LIKE 유사검색
-- WHERE절에서 사용되며 부분적으로 일치하는 속성을 찾을 때 사용된다.
-- % : 모든값
-- _ : 하나의 값

-- 사원테이블에서 사원들의 이름 중 M으로 시작하는 사원들의 정보를 사번, 이름, 직종순
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID 
FROM EMPLOYEES WHERE FIRST_NAME LIKE 'A%';

-- 사원테이블에서 이름이 D로 끝나는 사원의 사번, 이름, 직종을 출력
SELECT EMPLOYEE_ID ,FIRST_NAME,JOB_ID 
FROM EMPLOYEES WHERE FIRST_NAME  LIKE '%d';

-- 사원테이블에서 이름이 a가 포함되어있는 사원의 정보를 이름, 직종순 출력
SELECT FIRST_NAME ,JOB_ID 
FROM EMPLOYEES WHERE FIRST_NAME LIKE '%a%';

-- 이름의 첫글자가 M이면서 총 7글자의 이름을 가진 사원정보를 사번, 이름순 출력
SELECT EMPLOYEE_ID ,FIRST_NAME 
FROM EMPLOYEES WHERE FIRST_NAME LIKE 'M______';

--사원테이블에서 이름의 세번째 글자에 A가 들어가는 사원들의 정보를 사번, 이름순으로 출력
SELECT EMPLOYEE_ID ,FIRST_NAME 
FROM EMPLOYEES WHERE FIRST_NAME LIKE '__a%';

-- 이름에 소문자 o가 들어가면서 a로 끝나는 사원들의 정보를 이름, 급여순 조회
SELECT FIRST_NAME, SALARY 
FROM EMPLOYEES WHERE  FIRST_NAME LIKE '%o%a';

-- 이름이 H로 시작하면서 6글자 이상인 사원들의 정보를 사번, 이름순으로 조회
SELECT EMPLOYEE_ID ,FIRST_NAME 
FROM EMPLOYEES WHERE FIRST_NAME LIKE 'H_____%';

-- 사원테이블에서 이름에 s가 들어있지 않은 사원들만 사번, 이름으로 검색하세요
SELECT EMPLOYEE_ID, FIRST_NAME 
FROM EMPLOYEES WHERE FIRST_NAME NOT LIKE '%s%' AND FIRST_NAME NOT LIKE '%S%';

SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE  FIRST_NAME  LIKE '%el%' OR FIRST_NAME  LIKE '%en%';

-- 언더바 자체를 조회하고싶으면 이스케이프 문자 '%\_%'; 를 써야한다.