src/test/java
내가 작성한 code 메서드를 잘 작동하는지 확인하는 폴더
〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
스프링이 객체를 어떻게 저장하는가?
@SpringBootApplication 어노테이션에 속해있는 @ComponentScan 어노테이션이
해당 파일 아래 경로에 있는 모든 패키지를 탐색하면서 @Component 어노테이션이
붙어있는 클래스를 모두 Map 형태로 저장한다.                

클래스 이름의 첫글자를 소문자화 해서 key로 저장 
Ex) Computer -> computer
객체를 value로 만들어서 저장

스프링내부에서 실행되기 때문에 눈에보이지않음

의존성 주입(Dependency Injection)
객체를 필요로 할 때 스프링이 자동으로 주입을 해준다.

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

의존성 주입을 할 수 있는 세가지 방법
1. 필드 주입
@Autowired를 붙인다.
순환참조시 오류가 발생하지 않기때문에 stackOverflow가 일어날 수 있다.

순환참조
Bean간의 참조 관계가 순환되어 발생하는 상황
A클래스가 B클래스의 빈을 주입받고, B클래스가 A클래스의 빈을 주입받는 상황

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

2. ★★★★생성자 주입★★★★(99% 이 방법 사용)
생성자를 통해 객체를 주입받는다.
class Person{
	String name;
	int age;


	public Person(String name, int age){
		this.name = name;
		this.age = age;
	}
}

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

3. setter주입
- setter메서드를 통해 객체를 주입받는다.


〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

Gradle은 다양한 프로그래밍 언어를 지원하는 빌드 자동화 도구

유연성과 확장성 중시
의존성 관리
〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

build.gradle

라이브러리나 플러그인의 의존성 버전을 쉽게 관리하고, 
중복된 의존성이나 버전 충돌 문제를 방지해준다.

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

@Getter getter메서드 만들어줌
@Setter setter메서드 만들어줌
@NoargsConstructor 매개변수 없는 기본생성자
@AllArgsConstructor 모든 멤버를 매개변수로 가지는 생성자 생성
@RequriedArgsConstructor final이나 @NonNull인 필드만 매개변수로 갖는 생성자 생성
@Data getter,setter,requiredArgsConstructor,ToString,EqualsAndHashCode를 한번에 정의
@Builder 빌더패턴을 사용할 수 있게 해주는 어노테이션

@Builder
public class User{
	private String id;
	private String name;
	private String email;
}

User user = User.builder().id("1").name("홍길동").email("hong@example.com").build()