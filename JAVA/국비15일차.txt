문자 변환 보조 스트림
바이트 기반 스트림으로 텍스트 파일을 읽거나 쓸 경우, 
한글을 포함한 비영여권 문자들이 정상적으로 출력되지 않았다.

소스 스트림이 바이트 기반의 스트림이고, 입출력 데이터가 문자라면
 Reader와 Writer로 변환하여 사용하는것을 고려해야 한다.

그 이유는 Reader와 Writer는 문자 단위로 입출력하기 때문에 
바이트 기반 스트림보다 다양한 문자를 입출력할 수 있기 때문이다.

nputStreamReader
InputStreamReader는 바이트 기반 스트림 InputStream을 문자 기반의 스트림 Reader로 변환하는 보조 스트림이다.
FileInputStream in = new ...
InputStreamReader is = new InputStreamReader(in);
InputStreamReader is = new InputStreamReader(in, text-encoding);
InputStreamReader를 선언할 때는 text-encoding을 선택해 선언할 수 있다.
개발 환경의 text-encoding이 기본적으로 지정되어 사용된다.
만약 개발 환경이 읽어 들이는 파일의 text-encoding과 다르다면 직접 지정해야 한다.

열거형
열거형은 상수를 가지고 생성되는 객체들을 한곳에 모아둔 하나의 묶음이다.
상수를 사용자가 지정한 이름으로부터 0부터 순차적으로 증가시켜준다.(index값을 가진다)
클래스처럼 보이게 하는 상수
서로 관련있는 상수들끼리 모아 상수들을 정의하는것
※상수만 들어갈 수 있다.

getDeclaringClass()
name() : 열거형 상수의 이름을 문자열로 반환
ordinal() : 열거형 상수가 정의된 순서를 반환
valueof("상수명") : String값을 enum에서 가져온다 값이 없으면 Exception을 살생시킨다.
valueof(Item.class, "START); : 넘겨받은 class에서 String을 찾아, enum에서 가져온다.
values() : 열거형 상수안에 들어있는 내용들을 enum타입의 배열로 반환


enume은 데이터의 그룹화 및 관리에 용이
데이터들이 서로 관련되어 있지만 관련된 형태를 구현하는데 있어 에로사항이 생긴다면
enum을 통해 한 클래스 내에서 관리 할 수 있다.

프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로 포함시킨 것
어노테이션은 주석(comment)처럼 프로그래밍 언어에 영향을 미치지 않으면서도
 다른 프로그램에게 유용한 정보를 제공할 수 있다는 장접이 있다.
어노테이션의 뜻은 주석,주해,메모이다.

표준 어노테이션 → 자바에서 제공하는 기본어노테이션
@Override		컴파일러에게 재정의 하는 메서드라는 것을 알린다.		메서드명,반환값이 일치하는지 판단해서 오류를 발생시킨다.
@Deprecated		앞으로 사용되지 않을 것을 권장하는 대상에게 붙인다.	
@SuppressWarnings	컴파일러의 특정 경고메세지가 나타나지 않게 해준다.		경고를 무시해준다.
@SafeVarargs		지네릭스 타입의 가변인자에 사용한다.(JDK1.7)			(매개변수에 가변 인수를 쓸 때 발생하는 예외를 억제할 때)경고를 무시해준다.
@FunctionalInterface	함수형 인터페이스라는 것을 알린다.(JDK1.8)			람다식(인터페이스 - 추상메서드가 1개만 정의된 인터페이스)
@Native	native		메서드에서 참조되는 상수 앞에 붙인다.(JDK1.8)			다른 언어로 구현된것을 자바에서 사용하려고 할 때 사용한다.
@Target*			어노테이션이 적용 가능한 대상을 지정하는데 사용한다.	
@Documented*		어노테이션 정보가 @javadoc으로 작성된 문서에 포함되게 한다.	
@Inherited*		어노테이션이 하위 클래스에 상속되도록 한다.	
@Retention*		어노테이션이 유지되는 범위를 지정하는데 사용한다.	
@Repeatable*		어노테이션을 반복해서 적용할 수 있게 한다.(JDK1.8)

메타 어노테이션 → 어노테이션을 만들기 위한 어노테이션
- 스프링에서는 어노테이션은로 많이 통제를 한다.
-Java.lang.annotation 패키지에 정의되어 있다.

@Target
- 어노테이션이 적용 가능한 대상을 지정하는데 사용된다.
@Target(ElementType.TYPE) 클래스의 어떤 요소에나 적용 가능(기본값)
@Target(ElementType.FIELD) 특정 필드에 적용
@Target(ElementType.METHOD) 특정 메서드에 적용
@Target(ElementType.PARAMETER) 메서드의 매개변수
@Target(ElementType.CONSTRUCTOR) 생성자

@Retention
- 어노테이션이 유지되는 기간을 지정하는데 사용

@Retention(SOURCE) 소스 코드에만 이용 가능하며 컴파일 후에는 사라짐
@Retention(CLASS) 어노테이션이 .class파일에 존재하지만 런타임시 사라짐
@Retention(RUNTIME) 런타임시 사용가능(실행시 정보 제공)


