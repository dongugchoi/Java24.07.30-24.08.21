자바 
1. 메서드
2. 클래스
3. 인터페이스
4. 컬렉션
5. 리스트

<Spring 프로젝트 만드는법>
1. start.spring.io 에서 파일명과 사용할 라이브러리 선택후 다운로드
   (Spring Web, lombok, jpa, h2 database, dev tools)

2. eclipse 에 import


<구아바 라이브러리 다운로드>
mvnrepository를 검색해서 사이트에 들어간다음 guava를 검색후
다운로드수 가 제일 많은 jre를 복사하여 build.gradle 안에있는 
dependencies에 붙혀넣기

<스프링 프레임워크>
Object getBean

<스프링의 핵심 개념>

의존성 주입을 할 수 있는 세가지 방법

1. 필드주입
@Autowired를 붙힌다.
순환참조시 오류를 발생하지 않기 때문에 stackOverflow가 일어날 수 있다.

순환참조
Bean간의 참조 관계가 순환되어 발생하는 상황
(ex.)
- A클래스가 B클래스의 빈을 주입받고,
  B클래스가 A클래스의 빈을 주입받는 상황

2. 생성자 주입
생성자를 통해 객체를 주입받는다
class Person{
  String name;
  int age;

  publick Person(String name, int age){
	this.name = name;
	this.age = age;
  }
}

3. setter주입
- setter메서드를 통해 객체를 주입받는다.


<스프링이 객체를 어떻게 저장하는가?>

@SpringBootApplication 어노테이션에 속해있는 @ComponentScan (프로젝트 패키지 안에 DemoApplication)
어노테이션이 해당파일 아래 경로에 있는 모든 패키지를 탐색하면서 
@Component 어노테이션이 붙어있는 클래스를 모두 Map 형태로 저장한다.

클래스의 이름의 첫글자를 소문자화 해서 key로 저장 Computer -> computer
객체를 value로 만들어서 저장

<의존성 주입(Dependency Injection)>
객체가 필요한 곳에 직접 넣는게 아니라
컨테이너에 저장해놓은 객체를 주입을 시키는 것
객체를 필요로 할때 스프링이 자동으로 주입을 해준다.

1. 필드 주입
주입이 필요한곳에 @Autowired (순환참조만 안할 자신있으면 사용가능)

2. 생성자 주입 (99% 이방법을 사용한다고 보면 된다.)
생성자를 만들고 주입이 필요한 필드를 매개변수로 받아서 주입

	public 생성자 (멤버){
		this.멤버 = 멤버;
	}

3. setter 주입

예))
@Component
public class Battery(){ //객체 컨테이너에 Battery객체 저장
	int charge = 90;
}
@Component
public class Toy(){
	<만약 필드 주입이면>
	@Autowired 
	Battery battery; -? 배터리 객체가 필요함

	<만약 생성자 주입이면>
	public Toy(Battery battery){
		this.battery = battery;
	}
}

<Gradle>
자동화 빌드툴
플러그인
라이브러리 설치 -> 어떤버전의 어떤 라이브러리를 설치하겠다.
Gradle이 저장소로 가서 설치를 해준다.
프로젝트의 버전관리



<lombok 이용법>
다운받는곳 : https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.24
jar파일로 다운
다운확인 이클립스 help -> About eclipse ide -> 맨밑줄에 lombok 있으면 다운 완료
<lombok 다운로드 후 사용할 수 있는것들>

@Builder 빌더 패턴을 사용할 수 있게 해주는 어노테이션

- 빌더패턴을 사용하게 되면 오버로딩을 안해도 값을 하나만 넣을 수도 있다.
   User user = new User.builder().name("홍길동").age(30).build();

@Getter getter 메서드 만들어줌
@Setter setter 메서드 만들어줌
@NoArgsConstructor 매개변수 없는 기본생성자
@AllArgsConstructor 모든 필드를 매개변수로 가지는 생성자 생성
@RequiredArgsConstructor final 이나 @NonNULL인 필드만 매개변수로 갖는 생성자 생성
@Data-> getter, setter, requiredArgsConstructor, ToString, EqualsAndHashCode를 한번에 정의


<사용방법>
@Builder
public class User{
	private String id;
	private String name;
	private String email;

}

User user = User.builder().id("1").name("홍길동").email("hong@naver.com").build();

<레이어드 아키택처>			<MVC패턴>
소프트웨어 전반에 계층을 나눔	표현계층에서 주로 사용
표현,서비스,영속계층		Model,View,Controller
기능별로 책임의 분리		UI처리와 데이터의 흐름만 분리
계층별 의존성 최소화 		

계층간 상호작용을 통해 데이터가 흐름 Controller가 입력을 받아
Model과 view간의 흐름을 제어




