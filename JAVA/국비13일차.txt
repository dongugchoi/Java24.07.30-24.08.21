Map
map을 구현하는 클래스 HashMap(클래스)  // put(key,value)
		     ↗ {key : value} 	key중복x / value 중복o
인덱스x, 순서x				이미 있는 key로 추가할땐 value값이 갱신됨
					get(key) 조회
					remove(key) 삭제


자료구조
리스트, 셋, 맵  
스택, 큐

java.util.Stack

스택
stack.push() <- 값 넣기
stack.pop() <- 맨끝에꺼부터 지우기

제네릭
타입을 미리 결정하지 않는 것
클래스에 타입 매개변수를 넣는다
T
K
V
N
멀티타입 파라미터 <K,V> 여러개 사용시
1. 제네릭 타입 객체 생성 불가능
2. static필드, 메서드에 제네릭타입 사용불가능
3. 제네릭 타입 자체로 배열 생성 불가능

제네릭 타입 자체를 파라미터로 받을 수 있다
ArrayList<LinkedList<String>> list - new ArrayList<>();

ArrayList 요소로 LinkedList객체를 가짐

제네릭 인터페이스
인터페이스에도 제네릭을 붙일 수 있음
구현한 클래스에서도 제네릭 타입에 맞춰 구현

제네릭 메서드
클래스랑 별개로 제네릭 타입매개변수를 갖는 메서드
public <T> T addBox(T x, T y){

}

와일드카드
-제네릭타입에 들어갈 수 있는 범위를 한정
<? extends 상위타입> :  상위타입부터 자식은 다 들어올 수 있다.

<? super 하위타입> : 하위타입부터 부모는 다 들어올 수 있다.

lamda Expression
함수를 식으로 표현하는 방식

1. 인터페이스 생성
2. 인터페이스를 구현하는 클래스
3. 객체 만들어서 메서드를 사용

1.인터페이스 생성
2. 익명클래스 만들어서 사용 -> 한번만 사용 가능

1. 함수형 인터페이스 생성(추상메서드1개밖에 못만듦)
2. 람다식으로 표현

람다식 문법
접근제한자, 반환형, 메서드명 모두 생략
(매개변수) {기능 return 반환값}

매개변수의 자료형 생략 가능

소괄호 생략
매개변수가 1개일 때

str -> {return str};

3.중괄호 생략
3-1. return과 같이 생략하기
str -> str;
3-2. 반환값 없으면 생략 가능

컬렉션프레임워크와 함수형 인터페이스
컬렉션프레임워크의 인터페이스에 다수의 디폴트 메서드가 추가되었고, 그 중 일부는 함수형 인터페이스를 사용한다.
ArrayList에 forEach()메서드가 있고 Consumer 라는 매개변수를 받는다 
자바 공식문서에서 검색해보면 FunctionalInterface라는걸 알 수 있다.
때문에 람다식으로 표현할 수 있다.

인터페이스 -> 서비스의 가이드라인을 제공
구현클래스에서 모든 추상메서드를 다 오버라이딩

default메서드
인터페이스에 있는 구현메서드
추상메서드와 다른점은 body를 가지고 있다는것

장점
-인터페이스에 기본 구현을 제공함으로써, 해당 인터페이스를 구현하는 클래스에서 모든 메서드를 재정의할 필요가 없다.
-default메서드를 통해 인터페이스에서 다중 상속과 유사한 기능을 제공할 수 있게 됐다.

함수형 인터페이스로 사용할 때
추상메서드는 무조건 하나여야 한다.
단, 디폴트메서드는 여러개여도 상관없다.

java.util.function 패키지
- 대부분의 메서드의 타입이 비슷하다
- 매개변수는 0 ~ 2개 정도 사용을 한다.
- 반환값은 없거나 있거나
- 제네릭 메서드로 정의를 한다면 매개변수나반환타입이 달라도 문제가 되지 않는다.
- java.util.function 패키지에 일반적으로 자주 쓰는 형식의 메서드를 함수형 인터페이스로 미리 정의해 놓았다.
- 매번 함수형 인터페이스를 정의하기 보다는 가능하면 이 패키지의 인터페이스를 활용하는 것이 좋다.

java.util.function 패키지의 주효 함수형 인터페이스
함수형 인터페이스		메서드			설명
java.lang.Runnable		void() run()		매개변수도 없고 반환값도 없음
Supplier			T get()			매개변수는 없고 반환값만 있음
Consumer		void accept(T t)		Supplier와 반대로 매개변수만 있고, 반환값이 없음
Function<T,R>		R apply(T t)		일반적인 함수. 하나의 매개변수를 받아서 결과를 반환
Predicate			boolean test(T t)		조건식을 표현하는데 사용됨. 	매개변수는 하나. 반환값은 boolean

매개변수가 두 개인 함수형 인터페이스
매개변수가 두 개인 함수형 인터페이스는 이름 앞에 접두사 'Bi'가 붙는다.

함수형 인터페이스		메서드			설명
BiConsumer<T,U>		void accept(T t, U u)	두개의 매개변수만 있고 반환값이 없음
BiPredicate<T,U>		boolean test(T t, U u)	조건식을 표현하는데 사용됨. 매개변수는 둘, 반환값은 boolean
BiFunction<T,U,R>		R apply(T t, U u)		두 개의 매개변수를 받아서 하나의 결과를 반환

참고) Supplier는 매개변수는 없고 반환값만 존재하는데, 매서드는 두 개의 값을 반환할 수 없으므로 BiSupplier가 없다.
두 개 이상의 매개변수를 갖는 함수형 인터페이스가 필요하면 직접 만들어 써야 한다.

람다식의 합성과 결합
두 람다식을 합성해서 새로운 람다식을 만들 수 있다.
f.andThen(g) - 함수 f를 먼저 적용하고 그 다음에 함수 g를 적용한다.
f.compose(g) - g를 먼저 적용하고 f를 적용한다.
Function.identity() - 함수를 적용하기 이전과 동일한 항등함수, x -> x

결합
- Predicate르 and(),or(),negate()로 연결하여 새로운 Predicate로 결합할 수 있다.
- Predicate의 끝에 negate()를 붙이면 조건식 전체가 부정이 된다.
- static메서드인 isEqual()은 두 대상을 비교하는 Predicate를 만들 때 사용한다.

메서드 참조
메서드 참조는 말 그대로 메서드를 참조해서 매개변수의 정보 및 리턴 타입을 알아내어, 
람다식에서 불필요한 매개변수를 제거하는 것
람다식이 하나의 메서드만 호출하는 경우에는 메서드 참조(method reference)라는 
방법으로 람다식을 간결하게 할 수 있다.
하나의 메서드만 호출하는 람다식은 클래스이름::메서드이름 또는 참조변수::메서드이름으로 바꿀 수 있다.
※참조 타입 : (byte,short,char,int,long,float,double,boolean)
기본 타입을 제외하고 배열, 열거, 클래스,인터페이스 등을 말한다.
참조 타입의 변수에는 객체(메모리)의 주소가 저장된다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
스레드
우리는 컴퓨터로 문서를 작성하면서 동시에 음악을 듣고, 메신저를 사용할 수 있다.
이처럼 동시에 두 가지 이상의 작업을 처리하는 것을 '멀티태스킹'이라고 한다.
컴퓨터는 어떻게 여러 가지 작업을 동시에 할 수 있을까?
컴퓨터에는 멀티태스킹을 위해 '프로세스'와 '스레드'라는 두 가지 도구가 있다.

프로세스
컴퓨터에 저장되어 있는 파일을 실행하는 순간 메모리에 올라가고 동작하게 되는데 이 상태를 프로세스 라고 한다.
프로세스는 독립적으로 메모리에 등록되므로 여러 개의 프로그램을 동시에 실행할 수 있다.

스레드
프로세스 내부에 존재하면서 실행 흐름을 나타내는 것

프로세스가 실행되는 방식
시간 분할 방식 : 모든 프로세스에게 동일한 시간을 할당하고 골고루 실행되는 방식
선점형 방식 : 각각의 프로세스에게 우선 순위를 부여하고 높은 순으로 실행되는 방식

jvm이 스레드 처리시 하는 일
스레드 스케쥴링
스레드가 몇 개 존재하는지
스레드가 실행되는 프로그램 코드의 메모리 위치가 어딘지
현재 스레드의 상태는 무엇인지
스레드의 우선순위는 몇인지

개발자가 스레드 처리시 하는 일
자바 스레드로 작동할 작업이 무엇인지 코드로 작성
스레드 코드가 실행할 수 있도록 JVM한테 요청

스레드의 생성
1. Thread클래스를 상속하여 run()메서드를 구현
2. Runnable 인터페이스를 구현

Thread에 이름 부여하기
-현재 진행중인 스레드가 어떤 작업을 하는지 알기 위해 스레드에 이름을 부여할 수 있다.
- 우리가 생성한 스레드는 'Thread-N'이라는 이름으로 자동설정되는데
다른 이름으로 설정하고 싶다면 Thread클래스의 setName()메서드를 사용한다.

스레드의 동기화
-멀티 스레드프로글매이 실행될 때 다수의 스레드가 하나의 데이터를 공유하면서
스레드간의 경쟁이 일어날 수 있다.
- 경쟁이 정상적으로 이루어진다면 문제가 없겠지만 간혹 스레드 사이에서 자원 소유의
순서가 잘못되어 예상치 못한 결과가 나타날수도 있다.

최종적으로 20000원이 나와야 정상이다
실행결과에 따라 2만원이 아닌 더 적은 금액이 나올 수 있다.
그 이유는 두개의 스레드가 서로의 작업에 간섭하여 정상적으로 입금되지 않았기 때문이다.
이러한 오류를 방지하기 위해 여러 스레드가 하나의 공유 데이터에 동시에 접근하지 못하도록 스레드의 실행을
제어하는 '스레드'동기화가 필요하다.

스레드 동기화 처리
하나의 스레드가 이 영역에 진입할때 락을 걸어 다른 스레드가 수행되지 못하도록 하고
작업이 종료되면 락을 풀어 다른 스레드가 작업하도록 하는 것.
블록 또는 메서드 단위느 synchronized키워드를 붙여사용한다.

메서드 동기화 처리
메서드 이름 앞에 synchronized 키워드를 사용하면 해당 메서드 전체를 동기화 처리할 수 있다.

public synchronized void add(){...}

블록 동기화 처리
메서드 동기화 처리의 경우 메서드 처리 시간이 길어질 경우 성능에 영향을 미치는 단점이 있다.
이러한 이유로 전체 메스가 아닌 특정 영역만 동기화 처리를 하는 것을 블록 동기화 처리 라고 한다.

synchronized(객체명);

스레드 상태
스레드는 생성하고 실행, 종료되기까지 다양한 상태를 가진다.
각 스레드의 상태는 스레드 클래스에 정의되어 있으며, Thread.State 타입으로 알 수 있다.
스레드 상태에 따라 6개의 타입으로 분류하고 있다.

생성		NEW				스레드 객체가 생성되었지만 아직 start()메서드가 호출되지 않은 상태
대기		RUNNABLE			실행 대기 또는 실행 상태로 언제든지 갈 수 있는 상태
일시정지		WATING				다른 스레드가 종료될 때까지 대기하는 상태 주어진 시간동안 대기하는 상태
		TIMED_WATING			주어진 시간동안 대기하는 상태
		BLOCKED				락이 풀릴 때까지 대기하는 상태
종료		TERMINATED			수행을 종료한 상태

sleep(int mils)
주어진 시간동안 스레드를 정지시키는 메서드
해당 기능은 모든 스레드를 대기시키며, 주어진 시간이 지나면 풀리게 된다.

wait(), notify()
하나의 스레드가 완료되어야 다음 스레드가 동작할 수 있는 경우가 있다.
wait()메서드는 스레드를 대기시키고, notify()메서드는 대기중인 스레드를 다시 동작시킬 때 사용한다.
두 개 이상의 스레드가 구동중일 때 한 개의 동기화 스레드가 작업을 완전히 
마칠때까지 기다렸다가 다른 스레드의 작업이 수행되는 것이 아니라 동기화 진행중에 
일시적으로 스레드를 정지시키고 다른 스레드가 작업을 할 수 있다.