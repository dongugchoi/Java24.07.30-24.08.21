자료구조 -> 여러개의 데이터를 저장할 수 있는 것
List, 
Node들이 나열되어있는 자료구조

Stack(FILO)
Node들이 쌓이는 구조(선입후출)

Queue(FIFO)
Node들이 줄을 서는 구조(선입선출)
 
Set, Map

변수 -> 데이터를 1개 넣을 수 있음
배열 -> 배열의 크기가 생성시 고정(늘리거나 줄이는게 불가능)

알고리즘
조회방법
정렬방법
그리디(최단경로찾기, 동전 거스름돈)
분할 정복 (이진 탐색)

컬렉션 프레임워크
List
index있음
자료중복 가능
Set
index 없음
순서 없음
중복 불가능
Map
Key, value쌍으로 데이터가 저장됨{key:value}
index없음
순서대로 저장되는건 아님
key중복 불가능
value중복 가능

추가
put()

제네릭
타입을 미리 결정하지 않는다.
클래스나 인터페이스에 사용이 가능하다.
public interface 인터페이스명<T>{...}

제네릭 타입은 객체를 만들때 결정

제네릭 타입끼리는 상속이 불가능함

와일드카드 제네릭타입에 들어갈 수 있는 것은 너무 자유롭지만
상속이 안되기 때문에 들어갈 수 있는 타입을 제한하는것

<? extends 상위타입> : 상위타입부터 아 모든 클래스나 인터페이스 사용가능
<? super 하위타입> : 하위타입부터 위 모든클래스나 인터페이스 사용 가능

람다식
다형성 + 익명클래스
이름없는 함수를 만든다.

함수형 인터페이스
- 추상메서드가 1개만 들어있는 메서드

매개변수가 0 ~ 2개 있는 메서드
반환형이 있거나 없는 메서드

접근제한자, 반환형 함수명 제거하고 화살표로 표현

인터페이스명 변수명 = (매개변수) -> {명령};

변수명. 메서드명();
매개변수가 1개면 소괄호 생략가능
str -> {System.out.println(str)};

두개면 자료형은 생랴가능
(x,y) -> {x+y;};

1. 중괄호는 반환값 없으면 생략가능
2. return과 함께 생략가능

매개변수에 넣을 수 있음
반환값에 넣을 수 있음

슬데ㅡ
프로세스가 독립적으로 작동할 수 있게 해주는 것

스레드를 생성하는 법
1. Thread클래스의 상속
2. Runnable인터페이스의 구현

run()메서드를 오버라이딩 하여 독립적으로 실행하고 싶은 내용을 정의

main에서 start()메서드로 실행

Runnable 인터페이스로 구현한 스레드의 경우 main에서
Thread객체를 생성한 후 생성자에 우리가 생성한 스레드 객체를 전달하여
start()메서드 호출

sleep(밀리초) -> 주어진 초 동안 스레드 멈춤

wait() -> 스레드 멈춤

notify() -> 멈춘 스레드를 재시작

-------------------------------------------------------------------------------------------------------------------

파일 입출력
프로그램은 데이터를 외부에서 입력받아 처리하고 출력하는 구조로 되어있다.
프로그램으로 들어오는 모든 값을 Input이라고 한다.
프로그램을 나가는 모든 값을 Output이라고 한다.
자바에서는 입출력을 하기 위해 별도의 I/O패키지를 제공한다.
데이터는 자바에서 처리할 수 있는 모든것을 의미한다.
디스크상에 존재하는 데이터일수도 있고, 키보드나 마우스와 같은 외부 입력장치에서 입력되는 데이터일수도 있고,
인터넷을 통해 전송되는 데이터일수도 있다.

File클래스
파일 또는 폴더에 대한 정보를 제공하는 클래스
- 경로명, 파일 크기 , 타입, 날짜 등의 속성을 제공한다.
- 파일 생성, 삭제, 이름변경 등 파일 관리 작업을 지원하기 위한 메서드로 구성되어있다.

입출력스트림
자바의 입출력은 java.io패키지에서 제공한다.
java.io패키지에서 파일 시스템의 정보를 얻기 위해 file클래스와 데이터 입출력을 위한 다양한 클래스를 제공한다.
스트림의 종료를 크게 분류하면 전달 방식에 따라 바이트(byte)기반 스트림과 문자(char)기반 스트림으로 구분한다.

- 바이트 기반의 스트림은 데이터를 컴퓨터의 기본 단위인 byte단위로 나눠 읽거나 쓰고
- 문자 기반의 스트림은 텍스트 기반 문서를 다루기 위해 사용하는 스트림

바이트 기반의 스트림
- 컴퓨터의 모든 데이터는 바이트(byte)단위로 이루어져 있다.
- 따라서 바이트 기반 스트림의 경우 모든 타입의 데이터를 읽고 쓰는 것이 가능하다.
- 바이트 기반의 스트림은 바이트 입력 스트림과 바이트 출력 스트림이 있다.

InputStream
- 바이트 기반의 입력 스트림은 최상위 클래스로 InputStream객체가 제공된다.
- 해당 객체를 상속해 다양한 입력 스트림들이 존재한다.
- 각자의 개발 목적에 맞게 선택하여 사용할 수 있다.

InputStream의 주요 메서드
int read()		문자를 1byte씩 읽고 반환, 더이상 읽을 문자가 없으면 -1을 반환
int read(byte[] b) 매개변수로 전달된 배열에, 읽어온 문자를 저장하고 실제로 읽어온 수만큼 반환
	          더이상 읽을 문자가 없으면 -1을 반환
int read(byte[] b, int offset, int len) 매개변수로 전달된 배열에 정해진 범위만큼 읽어서 저장 
			        (offset 시작 위치, len 길이)
int available() 스트림으로부터 읽어올 수 있는 데이터의 크기를 반환
close() 스트림 사용을 종료하고 자원을 반환

FileInputStream
FileInputStream은 파일에서 바이트 단위로 자료를 읽어들일 때 사용하는 스트림이다.
이미지,동영상,텍스트 등 모든 타입의 파일을 읽어올 수 있다.

OutputStream
바이트 기반의 출력 스트림은 최상위 클래스로 OuputStream 객체가 제공된다.
해당 객체를 상속해 다양한 출력 스트림들이 존재한다

OutputStream의 주요 메서드
메서드						설명
int write(int b)			1byte 출력
int write(byte[]b)			매개변수로 주어진 배열의 모든 바이트 출력
int write(byte[],int offset,int len)	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 출력
시작 위치(offset), 길이(len)
int flush()				출력 버퍼에 장류하는 모든 내용 출력
close()				스트림 사용을 종료하고 자원을 반환

FileOutputStream
파일을 쓸 때 기존 파일명이 존재하는 경우가 있다.
이때 해당 파일의 내용을 유지한 채 이어 쓰거나 기존의 내용을 무시하고 새롭게 파일을 생성할 수 있다.
new FileOutputStream(경로/파일명, 이어쓰기 옵션);
이어쓰기 옵션이 true이면 기존 파일에 이어서 내용을 추가하고, false면 기존 내용을 무시하고 새로 쓰게 된다.
기본 옵션은 false로 되어있다.

문자 기반 스트림
자바에서는 기본 자료형은 char형을 통해 문자를 저장할 수 있다.
1byte 단위로 처리하는 바이트 기반 스트림은 모든 파일을 다룰 수 있으나 문자를 처리하는 char형의 크기는 2byte로 별도의 처리를 하지 않으면 정상적으로 읽지 못하는 경우가 있다.
이때, 문자 기반의 스트림을 사용하면 간단하게 문자를 처리할 수 있다.

Reader : 문자 입력 스트림
문자 기반 입력 스트림은 최상위 클래스인 Reader를 상속해 다양한 클래스를 제공한다.

메서드						설명
int read()					1개의 문자를 읽고 반환
				더 이상 읽을 문자가 없으면 -1를 반환

int read(char[] buf)			매개변수로 주어진 배열에 읽은 문자를 저장하고 읽은 수만큼 반환
				더 이상 읽을 문자가 없으면 -1를 반환

int read(char[] cbuf,int offset,int len)	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 저장
					시작위치(offset),길이(len)

close()				스트림 사용을 종료하고 자원을 반환



보조 스트림
스트림은 기능에 따라 스트림과 보조 스트림으로 구분한다.

기반 스트림 : 대상에 직접 바료를 읽고 쓰는 스트림입니다.
보조 스트림 : 직접 읽고 쓰는 기능 없이 기반 스트림에 추가로 사용할 수 있는 스트림이다.
보조 스트림은 실제로 데이터를 주고받을 수는 없다.
스트림의 기능을 향상시키거나 새로운 기능을 제공해주는 스트림으로 다른 보조스트림과 중첩하여 사용할 수 있다.

보조 스트림 연결하기
보조 스트림을 사용하려면 보조 스트림을 매개변수로 받는 기반 스트림이 먼저 선언되어야 한다.
보조 스트림은 스스로 데이터를 읽거나 쓸 수 없기 때문에 입출력과 바로 연결되는 기반 스트림이 필요하다.
보조 스트림 변수명 = new 보조 스트림(기반 스트림);


성능 향상 보조 스트림
느린 하드디스크와 네트워크는 입출력 성능에 영향을 준다.
이때 입출력 소스와 직접 작업하지 않고 버퍼라는 메모리를 이용해 작업하면 실행 성능을 향상시킬 수 있다.
하지만 버퍼는 크기가 작아 많은 양의 데이터를 처리하기에는 부족하다.
보조 스트림 중에서는 다음과 같이 메모리 버퍼를 추가로 제공하여 스트림의 성능을 향상시키는 것들이 있다.
바이트 기반 스트림: BufferedInputStream,BufferedOutputStream
문자 기반 스트림 : BufferedReader,BufferedWriter